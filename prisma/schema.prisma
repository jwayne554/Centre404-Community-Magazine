// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id                     String       @id @default(uuid())
  email                  String?      @unique
  name                   String
  password               String?      // Hashed password
  role                   String       @default("CONTRIBUTOR")
  accessibilityPrefs     String       @default("{}")
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  
  // Relations
  submissions            Submission[]
  reviewedSubmissions    Submission[] @relation("ReviewedBy")
  publishedMagazines     Magazine[]   @relation("PublishedBy")
  auditLogs              AuditLog[]
}

// Submission model for user content
model Submission {
  id                String          @id @default(uuid())
  userId            String?
  user              User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  category          String
  contentType       String
  status            String          @default("PENDING")
  
  // Content fields
  textContent       String?
  mediaUrl          String?
  mediaThumbnailUrl String?
  mediaMetadata     String          @default("{}")
  drawingData       String?         // Canvas drawing data
  accessibilityText String?         // Alt text or transcription
  
  // Timestamps
  submittedAt       DateTime        @default(now())
  reviewedAt        DateTime?
  updatedAt         DateTime        @updatedAt
  
  // Review fields
  reviewedById      String?
  reviewedBy        User?           @relation("ReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewNotes       String?
  
  // Relations
  magazineItems     MagazineItem[]
  
  @@index([status, submittedAt])
  @@index([userId])
  @@index([category])
}

// Magazine model for published collections
model Magazine {
  id                String          @id @default(uuid())
  title             String
  description       String?
  version           String
  status            String          @default("DRAFT")
  theme             String          @default("{}")
  
  // Publishing info
  publishedAt       DateTime?
  publishedById     String?
  publishedBy       User?           @relation("PublishedBy", fields: [publishedById], references: [id], onDelete: SetNull)
  
  // Access control
  shareableSlug     String          @unique
  isPublic          Boolean         @default(false)
  viewCount         Int             @default(0)
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  items             MagazineItem[]
  
  @@index([status, publishedAt])
  @@index([shareableSlug])
}

// Junction table for magazine items
model MagazineItem {
  id                String          @id @default(uuid())
  magazineId        String
  magazine          Magazine        @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  submissionId      String
  submission        Submission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  displayOrder      Int
  customTitle       String?
  customDescription String?
  
  createdAt         DateTime        @default(now())
  
  @@unique([magazineId, submissionId])
  @@index([magazineId, displayOrder])
}

// Audit log for tracking changes
model AuditLog {
  id                String          @id @default(uuid())
  userId            String?
  user              User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  action            String
  entityType        String
  entityId          String
  details           String
  ipAddress         String?
  userAgent         String?
  timestamp         DateTime        @default(now())
  
  @@index([entityType, entityId])
  @@index([userId, timestamp])
}

// Media storage tracking
model Media {
  id                String          @id @default(uuid())
  url               String
  thumbnailUrl      String?
  publicId          String?         // Cloudinary public ID
  type              String
  size              Int             // File size in bytes
  mimeType          String
  metadata          String          @default("{}")
  uploadedAt        DateTime        @default(now())
  
  @@index([type])
}